<?php
/*
 *
 * proxy 结构设计模式 - 代理模式
 * 隐藏实现步骤，统一使用方式
 *
优点：   
       1、职责清晰

        真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。

        2、代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介和保护了目标对象的作用。

        3、高扩展性

       适用场景：

      1) 远程代理（Remote  Proxy）为一个位于不同的地址空间的对象提供一个本地的代理对象。

        这个不同的地址空间可以是在同一台主机中，也可是在另一台主机中，远程代理又叫做大使(Ambassador)
      2) 虚拟代理（Virtual Proxy）根据需要创建开销很大的对象。

         如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建。 
      3) 保护代理（Protection Proxy）控制对原始对象的访问。

           保护代理用于对象应该有不同的访问权限的时候。
      4) 智能指引（Smart Reference）取代了简单的指针，它在访问对象时执行一些附加操作。
      5) Copy-on-Write代理：它是虚拟代理的一种，把复制（克隆）操作延迟到只有在客户端真正需要时才执行。

一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆。
 * */

/***
 * 酒厂-负责生产酒
 */
class Distillery
{
    public function produce()
    {
        return '茅台';
    }
}

/**
 * 经销商 - 负责加价售卖酒
 */
class Agency
{

    public function shell()
    {
        $distillery = new Distillery();
        $product = $distillery->produce();
        echo '每瓶'.$product.'加40%的价格售卖';
    }
}
// 经销商卖酒
$agency = new Agency();
$agency->shell();

/**
 * 总结：代理相当于租房中介
 * 1、用户：不用花精力去找厂家，只负责购买，快速买到
 * 2、酒厂：不花精力去售卖，以及具体卖多少钱给用户，只负责生产，提高效率
 * 3、经销商：不负责生产，只负责进货，和售卖，调整售价获取最大利益
 */